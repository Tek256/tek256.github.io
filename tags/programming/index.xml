<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on tek256</title>
    <link>//tek256.com/tags/programming/</link>
    <description>Recent content in Programming on tek256</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Sep 2020 04:20:00 -0700</lastBuildDate><atom:link href="//tek256.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>the portable developer</title>
      <link>//tek256.com/posts/the-portable-developer/</link>
      <pubDate>Sun, 20 Sep 2020 04:20:00 -0700</pubDate>
      
      <guid>//tek256.com/posts/the-portable-developer/</guid>
      <description>Imagine for a moment if you will, a developer who can work at any desk, with any computer, with any editor. What would that actually look like? How much time would it take for you to master each and every editor, how about operating systems? I&amp;rsquo;ve been thinking about this question a lot the last few days. As I transition into a chapter of my life where portability is becoming more of a factor, I&amp;rsquo;ve been asking these questions.</description>
    </item>
    
    <item>
      <title>programming principles</title>
      <link>//tek256.com/posts/programming-principles/</link>
      <pubDate>Mon, 17 Aug 2020 13:44:41 -0700</pubDate>
      
      <guid>//tek256.com/posts/programming-principles/</guid>
      <description>Throughout the last few weeks and months I’ve taken into great consideration what I actually need. Both personal and professionally, it seems like I’ve sort of had a decent layer of excess build up. By my own metrics I think I’m actually most the way “there” if you will. The last major step for me is moving from desktop to laptop. Regardless, I’m writing this to sort of set some of my personal preferences/metrics in stone for reading.</description>
    </item>
    
    <item>
      <title>code hardening</title>
      <link>//tek256.com/posts/code-hardening/</link>
      <pubDate>Sat, 20 Jun 2020 22:40:35 -0700</pubDate>
      
      <guid>//tek256.com/posts/code-hardening/</guid>
      <description>Hey! Since the 0.01 Release of Astera I&amp;rsquo;ve been working on making the code more reliable and efficient. I&amp;rsquo;ve fortunately not lost much motivation as to moving towards 0.02 and the added features which that will bring along with it.
A lot of this information exists online, but this post is meant to be a sort of introduction &amp;amp; combination of a few different sources. Just as a preface, this is meant for code hardening with clang &amp;amp; gcc.</description>
    </item>
    
    <item>
      <title>astera 0.01</title>
      <link>//tek256.com/posts/astera001/</link>
      <pubDate>Thu, 18 Jun 2020 00:49:20 -0700</pubDate>
      
      <guid>//tek256.com/posts/astera001/</guid>
      <description>Hey there, I see you&amp;rsquo;ve found this post about my dinky little game engine / library thing!
If you&amp;rsquo;re interested in that kind of thing, please check it out and let me know what you think! (Discord or Twitter are good ways of yelling in my general direction)
Here&amp;rsquo;s a brief overview of what astera supports / does:
 Rendering  Batched 2D Rendering Baked Sheet (Tiled or Bounded boxes) Post Processing Effects Custom Particle Simulation   Vector Graphics based User Interface  Supports programmatic input (aka controllers, mouse, keyboard, etc)   Audio  3D Audio Quick Sound Effect playback (OGG Vorbis &amp;amp; WAV) Song / Stream playback (OGG Vorbis (WAV soon))   Assets  ZIP &amp;amp; PAK File Management General asset management   An input system that works Really bad INI File writing &amp;amp; loading  FAQ About the engine Why C99?</description>
    </item>
    
  </channel>
</rss>
