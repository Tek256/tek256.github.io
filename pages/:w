---
title: "Portfolio"
author: "Devon"
draft: false
type: page
hide_date: true
hide_title: true
url: /portfolio/
---

For access to most of these projects, you can go thru the descriptions, or check my [GitHub](https://github.com/tek256) for the relevant repositories!Please note: a few of these projects are still under active development, and are subject to change!

[Resume](https://tek256.com/resume)

## Astera

Astera is one of my primary projects currently. It's a cross platform game library written in C99. The technologies it uses are: C, CMake, GLFW, OpenGL, OpenAL, nanovg, stb image & vorbis, and GLAD. Everything else in the project is self written!

You can download all of these examples, source code, and tools to run on your own machine from the [itch&#46;io page](https://tek.itch.io/astera) or its [GitHub](https://github.com/tek256/astera) page!



### Dungeon Example 

![Dungeon Example](/images/dungeon_example.png "Dungeon Example Running")

NOTE: This is actively under development and subject to change

This example runs most all of the different components in Astera to give a real world example of a game running with it. These components include: 
- Rendering (OpenGL, Batching, Post Processing, Dynamic Animations)
- Input (GLFW, Gamepad, Keyboard, Mouse)
- Audio (OpenAL, STB Vorbis, Vorbis Streaming, WAV Streaming, OpenAL Effects & Filters)
- Collision (GJK, AABB, and SAT bounds)
- Asset (PAK files, Asset Maps & Dynamic loading, xxHash for checksums)
- UI (nanovg, input management, framebuffering)

**Controls:**
- W move camera up 
- A move camera left
- S move camera down
- D move camera right
- ESC Exit program


### Audio Example

![Audio Example](/images/audio_example.png "Audio Example Running")

This example is running OpenGL, OpenAL, and STB Vorbis for realtime OGG Vorbis & wave file playback. All of the UI you see is run thru Astera's UI Renderer and supports keyboard & mouse input.

**Controls:**
- P play / pause music
- O reset music
- S play sound effect
- Esc Exit program

You can find the source code for this example specifically [here](https://github.com/tek256/astera/blob/master/examples/audio/main.c)



### Input Example

![Input Example](/images/input_example.png "Input Example Running")


This example is running OpenGL and nanovg for all of the rendering. The UI System supports both keyboard, mouse, and gamepad input. 

**Controls:**
- W / Up Arrow previous in list
- S / Down Array next in list
- Space select element 
- Left mouse button select element 
- Tab Enable/Disable text capture 
- Esc Exit program

You can find the source code for this example specifically [here](https://github.com/tek256/astera/blob/master/examples/input/main.c)



### Sprites Example

![Sprite Example](/images/sprites_example.png "Sprites Example Running")


This example is running OpenGL in order to show the dynamic batching and sprite sheet baking within Astera. It renders all of it in a differed rendering mode for post processing!

**Controls:**
- W move camera up 
- A move camera left
- S move camera down
- D move camera right
- ESC Exit program

You can find the source code for this example specifically [here](https://github.com/tek256/astera/blob/master/examples/sprites/main.c)


## Bear Quest (Jam Experiment)

![Bear Quest](/images/bearquest.png "Bear Quest")

Bear Quest is a jam experiment I did over a weekend within 48 hours. I started with no previous code and wrote the whole codebase and did all the art within those 48 hours. You can download the incomplete version of the [game](https://tek.itch.io/bear-quest) or view the source code on [GitHub](https://github.com/tek256/bear-quest)

Controls:
- D move right
- A move left
- Z attack
- X block


## Beyond the Void (Incomplete)

![BTV Example](/images/btv.jpg "Beyond the Void Running")

Beyond the Void was a real time 3D First Person Dungeon Crawler written in Java. The engine used LWJGL for wrapping most of its components, everything else was self written. You can find the old code on [GitHub](https://github.com/tek256/beyond-the-void-old)!
